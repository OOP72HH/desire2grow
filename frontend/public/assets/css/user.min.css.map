{"version":3,"sources":["_user-variables.scss","user.scss","theme/_colors.scss","theme/mixins/_breakpoints.scss"],"names":[],"mappings":"AAMA,mBACE,wBAAA,CCSF,mBACE,UCbM,CDcN,gBAAA,CACA,kBAAA,CACA,iBAAA,CACA,WAAA,CACA,QAAA,CACA,kDAEE,UCrBI,CDsBJ,kBAAA,CEkCA,0BF5CJ,mBAaI,eAAA,CAAA","file":"user.min.css","sourcesContent":["//\r\n//\r\n// user-variables.scss\r\n//\r\n// Place your own variable overrides here, these will override any Bootstrap and theme variables.\r\n\r\n.d2g-text-headline {\r\n  color: #8E1E35 !important;\r\n }","@import \"../../node_modules/bootstrap/scss/_functions\";\r\n@import \"theme/functions\";\r\n\r\n@import \"../../node_modules/bootstrap/scss/mixins\";\r\n@import \"theme/mixins\";\r\n\r\n@import \"user-variables\";\r\n@import \"theme/variables\";\r\n@import \"../../node_modules/bootstrap/scss/variables\";\r\n\r\n// \r\n// \r\n// user.scss\r\n//\r\n// Place your own theme CSS or SCSS rules below this line, these rules will override any Bootstrap and theme variables.\r\n\r\n.btn-boots-primary {\r\n  color: $white;\r\n  font-weight: bold;\r\n  background: #253F58;\r\n  border-radius: 9px;\r\n  width: 14rem;\r\n  border:0;\r\n  &:hover,\r\n  &:focus {\r\n    color: $white;\r\n    background: #4B756B;\r\n  }\r\n  @include media-breakpoint-up(xl) {\r\n    width: 25.569rem;\r\n  }\r\n}","//*-----------------------------------------------\r\n//|   Color System\r\n//-----------------------------------------------*/\r\n\r\n$white: #fff !default;\r\n$gray-100: #F5F2FC !default;\r\n$gray-200: #f2f2f2 !default;\r\n$gray-300: #E7E4EE !default;\r\n$gray-400: #bebebe !default;\r\n$gray-500: #949494 !default;\r\n$gray-600: #7F7F7F !default;\r\n$gray-700: #717075 !default;\r\n$gray-800: #5E5D61 !default;\r\n$gray-900: #403F42 !default;\r\n$gray-1000: #212121 !default;\r\n$gray-1100: #1c1c1c !default;\r\n$black: #000 !default;\r\n\r\n\r\n$grays: () !default;\r\n$grays: map-merge(\r\n  (\r\n    'black': $black,\r\n    '100': $gray-100,\r\n    '200': $gray-200,\r\n    '300': $gray-300,\r\n    '400': $gray-400,\r\n    '500': $gray-500,\r\n    '600': $gray-600,\r\n    '700': $gray-700,\r\n    '800': $gray-800,\r\n    '900': $gray-900,\r\n    '1000': $gray-1000,\r\n    '1100': $gray-1100,\r\n    'white': $white,\r\n  ),\r\n  $grays\r\n);\r\n$body-bg: $gray-200 !default;\r\n\r\n//*-----------------------------------------------\r\n//|   Solid Colors\r\n//-----------------------------------------------*/\r\n$blue: #045bc1 !default;\r\n$indigo: #1C16AF !default;\r\n$purple: #6f42c1 !default;\r\n$pink: #D032D0 !default;\r\n$red: #d0021b !default;\r\n$orange: #fd7e14 !default;\r\n$yellow: #f37f29 !default;\r\n$green: #7ed321 !default;\r\n$teal: #20c997 !default;\r\n$cyan: #00d6ff !default;\r\n\r\n//*-----------------------------------------------\r\n//|   Theme Colors\r\n//-----------------------------------------------*/\r\n$primary: $blue !default;\r\n$secondary: $pink !default;\r\n$success: $green !default;\r\n$info: $indigo !default;\r\n$warning: $yellow !default;\r\n$danger: $red !default;\r\n$light: $gray-100 !default;\r\n$dark: $gray-1100 !default;\r\n\r\n$theme-colors: () !default;\r\n$theme-colors: map-merge(\r\n  (\r\n    'primary': $primary,\r\n    'secondary': $secondary,\r\n    'success': $success,\r\n    'info': $info,\r\n    'warning': $warning,\r\n    'danger': $danger,\r\n    'light': $light,\r\n    'dark': $dark,\r\n  ),\r\n  $theme-colors\r\n);\r\n\r\n$theme-colors-soft: () !default;\r\n$theme-colors-soft: map-merge(\r\n  (\r\n    'primary': tint-color($primary, 88%) ,\r\n    'secondary': tint-color($secondary, 88%),\r\n    'success': tint-color($success, 88%),\r\n    'info': tint-color($info, 88%),\r\n    'warning': tint-color($warning, 88%),\r\n    'danger': tint-color($danger, 88%),\r\n    'light': tint-color($light, 88%),\r\n    'dark': tint-color($dark, 88%),\r\n  ),\r\n  $theme-colors-soft\r\n);\r\n\r\n\r\n$dark-grays: (\r\n  'black': $white,\r\n  '100': $gray-1100,\r\n  '200': $gray-1000,\r\n  '300': $gray-900,\r\n  '400': $gray-800,\r\n  '500': $gray-700,\r\n  '600': $gray-600,\r\n  '700': $gray-500,\r\n  '800': $gray-400,\r\n  '900': $gray-300,\r\n  '1000': $gray-200,\r\n  '1100': $gray-100,\r\n  'white': $black,\r\n);\r\n\r\n// $dark-grays: (\r\n//   'black': $white,\r\n//   '100': #0A1727,\r\n//   '200': #142130,\r\n//   '300': #25303F,\r\n//   '400': #3C4754,\r\n//   '500': #5B646F,\r\n//   '600': #828992,\r\n//   '700': #A9AEB6,\r\n//   '800': #CACED3,\r\n//   '900': #E3E5EA,\r\n//   '1000': #F3F4F7,\r\n//   '1100': #F9FAFD,\r\n//   'white': $black,\r\n// );\r\n\r\n$theme-dark-colors: (\r\n  'primary': $primary,\r\n  'secondary': $secondary,\r\n  'success': $success,\r\n  'info': $info,\r\n  'warning': $warning,\r\n  'danger': $danger,\r\n  'light': rgba(map-get($dark-grays, '200'), 0.25), //TODO\r\n  'dark': $light,\r\n);\r\n\r\n$theme-dark-colors-soft: () !default;\r\n$theme-dark-colors-soft: map-merge(\r\n  (\r\n    'primary': shift-color($primary, 70%),\r\n    'secondary': shift-color($secondary, 70%),\r\n    'success': shift-color($success, 70%),\r\n    'info': shift-color($info, 70%),\r\n    'warning': shift-color($warning, 70%),\r\n    'danger': shift-color($danger, 70%),\r\n    'light': shift-color($light, 70%),\r\n    'dark': shift-color($dark, 70%),\r\n  ),\r\n  $theme-dark-colors-soft\r\n);","// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n//\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n  $n: index($breakpoint-names, $name);\r\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n//\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\r\n  $min: map-get($breakpoints, $name);\r\n  @return if($min != 0, $min, null);\r\n}\r\n\r\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\r\n// The maximum value is calculated as the minimum of the next one less 0.02px\r\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\r\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n//\r\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    767.98px\r\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\r\n  $next: breakpoint-next($name, $breakpoints);\r\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\r\n// Useful for making responsive utilities.\r\n//\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\r\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  @if $min {\r\n    @media (min-width: $min) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\r\n  $max: breakpoint-max($name, $breakpoints);\r\n  @if $max {\r\n    @media (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media that spans multiple breakpoint widths.\r\n// Makes the @content apply between the min and max breakpoints\r\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\r\n  $min: breakpoint-min($lower, $breakpoints);\r\n  $max: breakpoint-max($upper, $breakpoints);\r\n\r\n  @if $min != null and $max != null {\r\n    @media (min-width: $min) and (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else if $max == null {\r\n    @include media-breakpoint-up($lower, $breakpoints) {\r\n      @content;\r\n    }\r\n  } @else if $min == null {\r\n    @include media-breakpoint-down($upper, $breakpoints) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n// Media between the breakpoint's minimum and maximum widths.\r\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  $max: breakpoint-max($name, $breakpoints);\r\n\r\n  @if $min != null and $max != null {\r\n    @media (min-width: $min) and (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else if $max == null {\r\n    @include media-breakpoint-up($name, $breakpoints) {\r\n      @content;\r\n    }\r\n  } @else if $min == null {\r\n    @include media-breakpoint-down($name, $breakpoints) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n"]}